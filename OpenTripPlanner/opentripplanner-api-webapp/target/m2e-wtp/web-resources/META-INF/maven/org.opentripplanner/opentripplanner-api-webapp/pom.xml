<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    
    <!-- 
    The opentripplanner-api-webapp module provides the OTP REST API as a WAR-packaged servlet.
    The REST resources themselves are defined in the otp-rest-api module, which is a dependency.
    This module should probably be renamed to otp-api-servlet.
     -->
    <artifactId>opentripplanner-api-webapp</artifactId>
    <packaging>war</packaging>
    <name>OpenTripPlanner API Webapp</name>

    <parent>
        <groupId>org.opentripplanner</groupId>
        <artifactId>opentripplanner</artifactId>
        <version>0.9.2-SNAPSHOT</version>
    </parent>

    <dependencies>
        <!-- OTP Modules -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>otp-rest-api</artifactId>
            <version>${project.version}</version>
        </dependency>
        <!-- SPRING -->
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-aop</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
          <groupId>org.springframework</groupId>
          <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
      	  <groupId>org.springframework.security</groupId>
      	  <artifactId>spring-security-core</artifactId>
        </dependency>
        <dependency>
      	  <groupId>org.springframework.security</groupId>
      	  <artifactId>spring-security-config</artifactId>
        </dependency>
        <dependency>
      	  <groupId>org.springframework.security</groupId>
      	  <artifactId>spring-security-web</artifactId>
        </dependency>
        <!-- LOGGING -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
        </dependency>
        <dependency>
          <!-- Spring uses jakarta commons logging, redirect it via slf4j API to Logback -->
          <groupId>org.slf4j</groupId>
          <artifactId>jcl-over-slf4j</artifactId>
        </dependency>        
        <dependency>
      	  <groupId>javax.servlet</groupId>
      	  <artifactId>servlet-api</artifactId>
      	  <version>2.5</version>
      	  <scope>provided</scope> <!-- this dependency is provided by the servlet container -->
        </dependency>
        <dependency>
      	  <groupId>javax.annotation</groupId>
      	  <artifactId>jsr250-api</artifactId>
      	  <version>1.0</version>
        </dependency>
        <dependency>
      	  <groupId>cglib</groupId>
      	  <artifactId>cglib</artifactId>
      	  <version>2.2.2</version>
        </dependency>
        <dependency>
          <groupId>org.projectlombok</groupId>
          <artifactId>lombok</artifactId>
        </dependency>
        <dependency>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
          <version>1</version>
        </dependency>
        <!-- JERSEY/SPRING SERVLET INTEGRATION -->
        <dependency>
          <groupId>com.sun.jersey.contribs</groupId>
          <artifactId>jersey-spring</artifactId> <!-- provides SpringComponentProviderFactory -->
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-servlet</artifactId> <!-- provides SpringServlet -->
        </dependency>
        <!-- TESTING DEPENDENCIES -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
          <groupId>com.sun.jersey</groupId>
          <artifactId>jersey-client</artifactId>
          <scope>test</scope> <!-- what is this used for? -->
        </dependency>
    </dependencies>

    <build>
        <finalName>opentripplanner-api-webapp</finalName>

        <plugins>
            <!-- Copy in a couple of default resources if they are not already present -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-resources</id>
                        <!-- bind to the generate-resources phase, which comes just before 
                        process-resources. the WAR packaging type automatically defines a
                        resources:resources execution in the process-resources phase, which copies 
                        resources from /src/main/resources to target/classes, and this automatic 
                        execution will happen _before_ any manually declared execution in the same 
                        phase, copying the resources into target before the defaults are provided. -->
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/src/main/resources</outputDirectory>
                            <overwrite>false</overwrite>
                            <resources>
                                <resource>
                                    <directory>${basedir}/src/defaults/resources</directory>
                                    <filtering>false</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        <!-- we now run enunciate on the REST API module not the servlet wrapper -->
        </plugins>
    </build>

</project>

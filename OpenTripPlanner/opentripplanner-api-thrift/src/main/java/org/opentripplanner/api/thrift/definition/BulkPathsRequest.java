/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.opentripplanner.api.thrift.definition;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BulkPathsRequest implements org.apache.thrift.TBase<BulkPathsRequest, BulkPathsRequest._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BulkPathsRequest");

  private static final org.apache.thrift.protocol.TField TRIPS_FIELD_DESC = new org.apache.thrift.protocol.TField("trips", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BulkPathsRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BulkPathsRequestTupleSchemeFactory());
  }

  private List<org.opentripplanner.api.thrift.definition.TripParameters> trips; // required
  private org.opentripplanner.api.thrift.definition.PathOptions options; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRIPS((short)1, "trips"),
    OPTIONS((short)2, "options");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRIPS
          return TRIPS;
        case 2: // OPTIONS
          return OPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.OPTIONS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRIPS, new org.apache.thrift.meta_data.FieldMetaData("trips", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "TripParameters"))));
    tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "PathOptions")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BulkPathsRequest.class, metaDataMap);
  }

  public BulkPathsRequest() {
  }

  public BulkPathsRequest(
    List<org.opentripplanner.api.thrift.definition.TripParameters> trips)
  {
    this();
    this.trips = trips;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BulkPathsRequest(BulkPathsRequest other) {
    if (other.isSetTrips()) {
      List<org.opentripplanner.api.thrift.definition.TripParameters> __this__trips = new ArrayList<org.opentripplanner.api.thrift.definition.TripParameters>();
      for (org.opentripplanner.api.thrift.definition.TripParameters other_element : other.trips) {
        __this__trips.add(other_element);
      }
      this.trips = __this__trips;
    }
    if (other.isSetOptions()) {
      this.options = other.options;
    }
  }

  public BulkPathsRequest deepCopy() {
    return new BulkPathsRequest(this);
  }

  @Override
  public void clear() {
    this.trips = null;
    this.options = null;
  }

  public int getTripsSize() {
    return (this.trips == null) ? 0 : this.trips.size();
  }

  public java.util.Iterator<org.opentripplanner.api.thrift.definition.TripParameters> getTripsIterator() {
    return (this.trips == null) ? null : this.trips.iterator();
  }

  public void addToTrips(org.opentripplanner.api.thrift.definition.TripParameters elem) {
    if (this.trips == null) {
      this.trips = new ArrayList<org.opentripplanner.api.thrift.definition.TripParameters>();
    }
    this.trips.add(elem);
  }

  public List<org.opentripplanner.api.thrift.definition.TripParameters> getTrips() {
    return this.trips;
  }

  public void setTrips(List<org.opentripplanner.api.thrift.definition.TripParameters> trips) {
    this.trips = trips;
  }

  public void unsetTrips() {
    this.trips = null;
  }

  /** Returns true if field trips is set (has been assigned a value) and false otherwise */
  public boolean isSetTrips() {
    return this.trips != null;
  }

  public void setTripsIsSet(boolean value) {
    if (!value) {
      this.trips = null;
    }
  }

  public org.opentripplanner.api.thrift.definition.PathOptions getOptions() {
    return this.options;
  }

  public void setOptions(org.opentripplanner.api.thrift.definition.PathOptions options) {
    this.options = options;
  }

  public void unsetOptions() {
    this.options = null;
  }

  /** Returns true if field options is set (has been assigned a value) and false otherwise */
  public boolean isSetOptions() {
    return this.options != null;
  }

  public void setOptionsIsSet(boolean value) {
    if (!value) {
      this.options = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TRIPS:
      if (value == null) {
        unsetTrips();
      } else {
        setTrips((List<org.opentripplanner.api.thrift.definition.TripParameters>)value);
      }
      break;

    case OPTIONS:
      if (value == null) {
        unsetOptions();
      } else {
        setOptions((org.opentripplanner.api.thrift.definition.PathOptions)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TRIPS:
      return getTrips();

    case OPTIONS:
      return getOptions();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TRIPS:
      return isSetTrips();
    case OPTIONS:
      return isSetOptions();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BulkPathsRequest)
      return this.equals((BulkPathsRequest)that);
    return false;
  }

  public boolean equals(BulkPathsRequest that) {
    if (that == null)
      return false;

    boolean this_present_trips = true && this.isSetTrips();
    boolean that_present_trips = true && that.isSetTrips();
    if (this_present_trips || that_present_trips) {
      if (!(this_present_trips && that_present_trips))
        return false;
      if (!this.trips.equals(that.trips))
        return false;
    }

    boolean this_present_options = true && this.isSetOptions();
    boolean that_present_options = true && that.isSetOptions();
    if (this_present_options || that_present_options) {
      if (!(this_present_options && that_present_options))
        return false;
      if (!this.options.equals(that.options))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(BulkPathsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    BulkPathsRequest typedOther = (BulkPathsRequest)other;

    lastComparison = Boolean.valueOf(isSetTrips()).compareTo(typedOther.isSetTrips());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrips()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trips, typedOther.trips);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOptions()).compareTo(typedOther.isSetOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, typedOther.options);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BulkPathsRequest(");
    boolean first = true;

    sb.append("trips:");
    if (this.trips == null) {
      sb.append("null");
    } else {
      sb.append(this.trips);
    }
    first = false;
    if (isSetOptions()) {
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (!isSetTrips()) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'trips' is unset! Struct:" + toString());
    }

  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BulkPathsRequestStandardSchemeFactory implements SchemeFactory {
    public BulkPathsRequestStandardScheme getScheme() {
      return new BulkPathsRequestStandardScheme();
    }
  }

  private static class BulkPathsRequestStandardScheme extends StandardScheme<BulkPathsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BulkPathsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRIPS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.trips = new ArrayList<org.opentripplanner.api.thrift.definition.TripParameters>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  org.opentripplanner.api.thrift.definition.TripParameters _elem2; // required
                  _elem2 = new org.opentripplanner.api.thrift.definition.TripParameters();
                  _elem2.read(iprot);
                  struct.trips.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setTripsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.options = new org.opentripplanner.api.thrift.definition.PathOptions();
              struct.options.read(iprot);
              struct.setOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BulkPathsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.trips != null) {
        oprot.writeFieldBegin(TRIPS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.trips.size()));
          for (org.opentripplanner.api.thrift.definition.TripParameters _iter3 : struct.trips)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.options != null) {
        if (struct.isSetOptions()) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BulkPathsRequestTupleSchemeFactory implements SchemeFactory {
    public BulkPathsRequestTupleScheme getScheme() {
      return new BulkPathsRequestTupleScheme();
    }
  }

  private static class BulkPathsRequestTupleScheme extends TupleScheme<BulkPathsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BulkPathsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.trips.size());
        for (org.opentripplanner.api.thrift.definition.TripParameters _iter4 : struct.trips)
        {
          _iter4.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetOptions()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetOptions()) {
        struct.options.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BulkPathsRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.trips = new ArrayList<org.opentripplanner.api.thrift.definition.TripParameters>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          org.opentripplanner.api.thrift.definition.TripParameters _elem7; // required
          _elem7 = new org.opentripplanner.api.thrift.definition.TripParameters();
          _elem7.read(iprot);
          struct.trips.add(_elem7);
        }
      }
      struct.setTripsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.options = new org.opentripplanner.api.thrift.definition.PathOptions();
        struct.options.read(iprot);
        struct.setOptionsIsSet(true);
      }
    }
  }

}


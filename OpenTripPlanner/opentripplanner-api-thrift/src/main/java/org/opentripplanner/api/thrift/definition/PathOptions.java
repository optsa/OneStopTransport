/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.opentripplanner.api.thrift.definition;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class PathOptions implements org.apache.thrift.TBase<PathOptions, PathOptions._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PathOptions");

  private static final org.apache.thrift.protocol.TField NUM_PATHS_FIELD_DESC = new org.apache.thrift.protocol.TField("num_paths", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RETURN_DETAILED_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("return_detailed_path", org.apache.thrift.protocol.TType.BOOL, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new PathOptionsStandardSchemeFactory());
    schemes.put(TupleScheme.class, new PathOptionsTupleSchemeFactory());
  }

  private int num_paths; // optional
  private boolean return_detailed_path; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUM_PATHS((short)1, "num_paths"),
    RETURN_DETAILED_PATH((short)2, "return_detailed_path");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUM_PATHS
          return NUM_PATHS;
        case 2: // RETURN_DETAILED_PATH
          return RETURN_DETAILED_PATH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUM_PATHS_ISSET_ID = 0;
  private static final int __RETURN_DETAILED_PATH_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);
  private _Fields optionals[] = {_Fields.NUM_PATHS,_Fields.RETURN_DETAILED_PATH};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUM_PATHS, new org.apache.thrift.meta_data.FieldMetaData("num_paths", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RETURN_DETAILED_PATH, new org.apache.thrift.meta_data.FieldMetaData("return_detailed_path", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PathOptions.class, metaDataMap);
  }

  public PathOptions() {
    this.num_paths = 1;

    this.return_detailed_path = true;

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PathOptions(PathOptions other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.num_paths = other.num_paths;
    this.return_detailed_path = other.return_detailed_path;
  }

  public PathOptions deepCopy() {
    return new PathOptions(this);
  }

  @Override
  public void clear() {
    this.num_paths = 1;

    this.return_detailed_path = true;

  }

  public int getNum_paths() {
    return this.num_paths;
  }

  public void setNum_paths(int num_paths) {
    this.num_paths = num_paths;
    setNum_pathsIsSet(true);
  }

  public void unsetNum_paths() {
    __isset_bit_vector.clear(__NUM_PATHS_ISSET_ID);
  }

  /** Returns true if field num_paths is set (has been assigned a value) and false otherwise */
  public boolean isSetNum_paths() {
    return __isset_bit_vector.get(__NUM_PATHS_ISSET_ID);
  }

  public void setNum_pathsIsSet(boolean value) {
    __isset_bit_vector.set(__NUM_PATHS_ISSET_ID, value);
  }

  public boolean isReturn_detailed_path() {
    return this.return_detailed_path;
  }

  public void setReturn_detailed_path(boolean return_detailed_path) {
    this.return_detailed_path = return_detailed_path;
    setReturn_detailed_pathIsSet(true);
  }

  public void unsetReturn_detailed_path() {
    __isset_bit_vector.clear(__RETURN_DETAILED_PATH_ISSET_ID);
  }

  /** Returns true if field return_detailed_path is set (has been assigned a value) and false otherwise */
  public boolean isSetReturn_detailed_path() {
    return __isset_bit_vector.get(__RETURN_DETAILED_PATH_ISSET_ID);
  }

  public void setReturn_detailed_pathIsSet(boolean value) {
    __isset_bit_vector.set(__RETURN_DETAILED_PATH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NUM_PATHS:
      if (value == null) {
        unsetNum_paths();
      } else {
        setNum_paths((Integer)value);
      }
      break;

    case RETURN_DETAILED_PATH:
      if (value == null) {
        unsetReturn_detailed_path();
      } else {
        setReturn_detailed_path((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NUM_PATHS:
      return Integer.valueOf(getNum_paths());

    case RETURN_DETAILED_PATH:
      return Boolean.valueOf(isReturn_detailed_path());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NUM_PATHS:
      return isSetNum_paths();
    case RETURN_DETAILED_PATH:
      return isSetReturn_detailed_path();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PathOptions)
      return this.equals((PathOptions)that);
    return false;
  }

  public boolean equals(PathOptions that) {
    if (that == null)
      return false;

    boolean this_present_num_paths = true && this.isSetNum_paths();
    boolean that_present_num_paths = true && that.isSetNum_paths();
    if (this_present_num_paths || that_present_num_paths) {
      if (!(this_present_num_paths && that_present_num_paths))
        return false;
      if (this.num_paths != that.num_paths)
        return false;
    }

    boolean this_present_return_detailed_path = true && this.isSetReturn_detailed_path();
    boolean that_present_return_detailed_path = true && that.isSetReturn_detailed_path();
    if (this_present_return_detailed_path || that_present_return_detailed_path) {
      if (!(this_present_return_detailed_path && that_present_return_detailed_path))
        return false;
      if (this.return_detailed_path != that.return_detailed_path)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(PathOptions other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    PathOptions typedOther = (PathOptions)other;

    lastComparison = Boolean.valueOf(isSetNum_paths()).compareTo(typedOther.isSetNum_paths());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNum_paths()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_paths, typedOther.num_paths);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReturn_detailed_path()).compareTo(typedOther.isSetReturn_detailed_path());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturn_detailed_path()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.return_detailed_path, typedOther.return_detailed_path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PathOptions(");
    boolean first = true;

    if (isSetNum_paths()) {
      sb.append("num_paths:");
      sb.append(this.num_paths);
      first = false;
    }
    if (isSetReturn_detailed_path()) {
      if (!first) sb.append(", ");
      sb.append("return_detailed_path:");
      sb.append(this.return_detailed_path);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PathOptionsStandardSchemeFactory implements SchemeFactory {
    public PathOptionsStandardScheme getScheme() {
      return new PathOptionsStandardScheme();
    }
  }

  private static class PathOptionsStandardScheme extends StandardScheme<PathOptions> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PathOptions struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUM_PATHS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.num_paths = iprot.readI32();
              struct.setNum_pathsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RETURN_DETAILED_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.return_detailed_path = iprot.readBool();
              struct.setReturn_detailed_pathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PathOptions struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetNum_paths()) {
        oprot.writeFieldBegin(NUM_PATHS_FIELD_DESC);
        oprot.writeI32(struct.num_paths);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReturn_detailed_path()) {
        oprot.writeFieldBegin(RETURN_DETAILED_PATH_FIELD_DESC);
        oprot.writeBool(struct.return_detailed_path);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PathOptionsTupleSchemeFactory implements SchemeFactory {
    public PathOptionsTupleScheme getScheme() {
      return new PathOptionsTupleScheme();
    }
  }

  private static class PathOptionsTupleScheme extends TupleScheme<PathOptions> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PathOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetNum_paths()) {
        optionals.set(0);
      }
      if (struct.isSetReturn_detailed_path()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetNum_paths()) {
        oprot.writeI32(struct.num_paths);
      }
      if (struct.isSetReturn_detailed_path()) {
        oprot.writeBool(struct.return_detailed_path);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PathOptions struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.num_paths = iprot.readI32();
        struct.setNum_pathsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.return_detailed_path = iprot.readBool();
        struct.setReturn_detailed_pathIsSet(true);
      }
    }
  }

}

